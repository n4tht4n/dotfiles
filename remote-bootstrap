#!/usr/bin/env bash

OS="$(uname)"
USERNAME="$USER"

echo -e "\nðŸš€ Executing remote-bootstrap... dotfiles.git â†’ ~/.dotfiles" && sleep 2

### 1. Check if we're running on a supported system
if [[ "$OS" != "Linux" && "$OS" != "Darwin" ]]; then
  echo "ðŸ’£ Didn't find a supported system! ($OS not in [Linux, Darwin])" && exit 1
elif [[ "$OS" == "Linux" ]]; then
  [ -f /etc/os-release ] && . /etc/os-release && OS=$ID
  if [[ "$OS" != "debian" && "$OS" != "raspbian" ]]; then
    echo "ðŸ’£ Didn't find a supported Linux! ($OS is not in [debian, raspbian])" && exit 1
  fi
fi

### 2. On a fresh Linux, make sure we have some basic and required tools ready
if [[ "$OS" != "Darwin" ]]; then
  # curl and zsh!? (do this 1st to have zsh as the default shell after relog ðŸ˜Ž)
  echo "ðŸš§ Installing some mandatory tools!" && sleep 2
  su root -c "export PATH=/usr/sbin:$PATH;apt install curl zsh;chsh -s /bin/zsh $USERNAME;exit 0"

  # sudo!?
  sudo -h &> /dev/null
  if [[ $? -ne 0 ]]; then
    echo "ðŸš§ Installing missing 'sudo'!" && sleep 2
    su root -c "export PATH=/usr/sbin:$PATH;apt install sudo;usermod -aG sudo $USERNAME;exit 0"
    echo "ðŸ’£ Please relog the shell to get full access to 'sudo'! Then rerun this script again!" && exit 0
  fi
fi

### 3. Install pkgx
type pkgx &> /dev/null || (curl -fsS https://pkgx.sh | sh)

### 4. Load the pkgx env temporarily and install git and chezmoi on-the-fly
eval "$(pkgx integrate)"
env +git +chezmoi

### 5. Call chezmoi to take over (it will also clone this repo!)
chezmoi init -S ~/.dotfiles --apply n4tht4n